; Options for the Synopsys DesignWare ARC port of the compiler
;
; Copyright (C) 2005, 2007-2012 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
; License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

HeaderInclude
config/arc/arc-opts.h

mbig-endian
Target Report RejectNegative Mask(BIG_ENDIAN)
Compile code for big endian mode

mlittle-endian
Target Report RejectNegative InverseMask(BIG_ENDIAN)
Compile code for little endian mode.  This is the default

mno-cond-exec
Target Report RejectNegative Mask(NO_COND_EXEC)
Disable ARCompact specific pass to generate conditional execution instructions

; This is here just for documentation,
; it is really handled in DRIVER_SELF_SPECS.
mA6
Target Report
Generate ARCompact 32-bit code for ARCtangent-ARC600 processor

mARC600
Target Report
Same as -mA6

marc600
Target Report
Same as -mA6

mARC601
Target Report
Generate ARCompact 32-bit code for ARCtangent-ARC601 processor

marc601
Target Report
Generate ARCompact 32-bit code for ARCtangent-ARC601 processor

mA7
Target Report
Generate ARCompact 32-bit code for ARCtangent-ARC700 processor

mARC700
Target Report
Same as -mA7

marc700
Target Report
Same as -mA7

mav2em
Target Report Undocumented Warn(%qs is deprecated, use -mcpu=arcem)
Generate ARCv2 code for EM processor

mav2hs
Target Report Undocumented Warn(%qs is deprecated, use -mcpu=archs)
Generate ARCv2 code for HS processor

mARCv2EM
Target Undocumented Warn(%qs is deprecated, use -mcpu=arcem)
Same as -mcpu=arcem

mEM
Target Undocumented Warn(%qs is deprecated, use -mcpu=arcem)
Same as -mcpu=arcem

mARCv2HS
Target Undocumented Warn(%qs is deprecated, use -mcpu=archs)
Same as -mcpu=archs

mHS
Target Undocumented Warn(%qs is deprecated, use -mcpu=archs)
Same as -mcpu=archs

marcem
Target Undocumented Warn(%qs is deprecated, use -mcpu=arcem)
Same as -mcpu=arcem

marchs
Target Undocumented Warn(%qs is deprecated, use -mcpu=archs)
Same as -mcpu=archs

; END backward-compatibility aliases, translated by DRIVER_SELF_SPECS

TargetVariable
unsigned int arc_jli_func_addr = 0

mjli-func-addr=
Target RejectNegative Joined Var(arc_jli_func_addr) Enum(arc_jli_func_addr_type) Init(ARC_FUNC_ADDR_COMPAT)
Specify the way the address of a function in the JLI table is obtained. Option 'compat' will use the Metaware method (jli_call_always will use the address of the function and jli_call_dynamic will use the address of the JLI entry). Option 'init' will use the address of the JLI entry using the jli_base register when the function pointer is saved. Option 'always' will use a stub function to call the JLI entry relative to the jli_base register upon calling the function pointed to.

Enum
Name(arc_jli_func_addr_type) Type(enum arc_jli_func_addr_type)

EnumValue
Enum(arc_jli_func_addr_type) String(compat) Value(ARC_FUNC_ADDR_COMPAT)

EnumValue
Enum(arc_jli_func_addr_type) String(init) Value(ARC_FUNC_ADDR_INIT)

EnumValue
Enum(arc_jli_func_addr_type) String(always) Value(ARC_FUNC_ADDR_ALWAYS)

TargetVariable
int arc_mpy_option = DEFAULT_arc_mpy_option

mmpy-option=
Target RejectNegative Joined
-mmpy-option={0,1,2,3,4,5,6,7,8,9} Compile ARCv2 code with a multiplier design option.

mmpy16
Target Report Mask(MPY16_SET)
Enable MPYW,MPYUW instructions.

mdiv-rem
Target Report Mask(DIVREM)
Enable DIV-REM instructions for ARCv2

mcode-density
Target Report Mask(CODE_DENSITY)
Enable code density instructions for ARCv2

matomic
Target Report Mask(ATOMIC)
Enable atomic instructions.

mll64
Target Report Mask(LL64)
Enable double load/store instructions for ARC HS

mmixed-code
Target Report Mask(MIXED_CODE_SET)
Tweak register allocation to help 16-bit instruction generation
; originally this was:
;Generate ARCompact 16-bit instructions intermixed with 32-bit instructions for ARCtangen and higher processors
; but we do that without -mmixed-code, too, it's just a different instruction
; count / size tradeoff.

mvolatile-cache
Target Report Mask(VOLATILE_CACHE_SET)
Use ordinarily cached memory accesses for volatile references

mbarrel-shifter
Target Report Mask(BARREL_SHIFTER)
Generate instructions supported by barrel shifter

mnorm
Target Report Mask(NORM_SET)
Generate norm instruction

mswap
Target Report Mask(SWAP_SET)
Generate swap instruction

mmul64
Target Report Mask(MUL64_SET)
Generate mul64 and mulu64 instructions

mmpy
Target Report Undocumented Mask(MPY_SET) Warn(%qs is deprecated)
Generate MPYxW instructions. Default for ARC700. For ARC600 is not valid.

mEA
Target Report Mask(EA_SET)
Generate Extended arithmetic instructions.  Currently only divaw, adds, subs and sat16 are supported

msoft-float
Target Report RejectNegative  Warn(%qs is deprecated)
Dummy flag. This is the default unless FPX/FPU switches are provided explicitly

mfpu=
Target RejectNegative Joined Enum(arc_fpu) Var(arc_fpu_build) Init(DEFAULT_arc_fpu_build)
Specify the name of the target floating point configuration.

Enum
Name(arc_fpu) Type(int)

EnumValue
Enum(arc_fpu) String(fpus) Value(FPU_FPUS)

EnumValue
Enum(arc_fpu) String(fpud) Value(FPU_FPUD)

EnumValue
Enum(arc_fpu) String(fpuda) Value(FPU_FPUDA)

EnumValue
Enum(arc_fpu) String(fpuda_div) Value(FPU_FPUDA_DIV)

EnumValue
Enum(arc_fpu) String(fpuda_fma) Value(FPU_FPUDA_FMA)

EnumValue
Enum(arc_fpu) String(fpuda_all) Value(FPU_FPUDA_ALL)

EnumValue
Enum(arc_fpu) String(fpus_div) Value(FPU_FPUS_DIV)

EnumValue
Enum(arc_fpu) String(fpud_div) Value(FPU_FPUD_DIV)

EnumValue
Enum(arc_fpu) String(fpus_fma) Value(FPU_FPUS_FMA)

EnumValue
Enum(arc_fpu) String(fpud_fma) Value(FPU_FPUD_FMA)

EnumValue
Enum(arc_fpu) String(fpus_all) Value(FPU_FPUS_ALL)

EnumValue
Enum(arc_fpu) String(fpud_all) Value(FPU_FPUD_ALL)

mlong-calls
Target Report Mask(LONG_CALLS_SET)
Generate call insns as register indirect calls

mno-brcc
Target Report Mask(NO_BRCC_SET)
Do no generate BRcc instructions in arc_reorg.

msdata
Target Report InverseMask(NO_SDATA_SET)
Generate sdata references.  This is the default, unless you compile for PIC.

mno-millicode
Target Report Mask(NO_MILLICODE_THUNK_SET)
Do not generate millicode thunks (needed only with -Os)

mspfp
Target Report Mask(SPFP_COMPACT_SET)
FPX: Generate Single Precision FPX (compact) instructions.

mspfp-compact
Target Report Mask(SPFP_COMPACT_SET) MaskExists
FPX: Generate Single Precision FPX (compact) instructions.

mspfp-fast
Target Report Mask(SPFP_FAST_SET)
FPX: Generate Single Precision FPX (fast) instructions.

margonaut
Target Report Mask(ARGONAUT_SET)
FPX: Enable Argonaut ARC CPU Double Precision Floating Point extensions.

mdpfp
Target Report Mask(DPFP_COMPACT_SET)
FPX: Generate Double Precision FPX (compact) instructions.

mdpfp-compact
Target Report Mask(DPFP_COMPACT_SET) MaskExists
FPX: Generate Double Precision FPX (compact) instructions.

mdpfp-fast
Target Report Mask(DPFP_FAST_SET)
FPX: Generate Double Precision FPX (fast) instructions.

mno-dpfp-lrsr
Target Report Mask(DPFP_DISABLE_LRSR)
Disable LR and SR instructions from using FPX extension aux registers.

msimd
Target Report Mask(SIMD_SET)
Enable generation of ARC SIMD instructions via target-specific builtins.

mcpu=
Target RejectNegative Joined Enum(processor_type) Var(arc_cpu) Init(PROCESSOR_NONE)
Specify the name of the target CPU

msize-level=
Target RejectNegative Joined UInteger Var(arc_size_opt_level) Init(-1)
size optimization level: 0:none 1:opportunistic 2: regalloc 3:drop align, -Os

misize
Target Report Var(TARGET_DUMPISIZE)
Annotate assembler instructions with estimated addresses

multcost=
Target RejectNegative Joined UInteger Var(arc_multcost) Init(-1)
Cost to assume for a multiply instruction, with 4 being equal to a normal insn.

mtune=
Target RejectNegative Joined Enum(arcTune) Var(arc_tune) Init(TUNE_NONE)
Tune for a specific ARC cpu.

Enum
Name(arcTune) Type(int)

EnumValue
Enum(arcTune) String(arc600) Value(TUNE_ARC600)

EnumValue
Enum(arcTune) String(arc601) Value(TUNE_ARC600)

EnumValue
Enum(arcTune) String(arc700) Value(TUNE_ARC700_4_2_STD)

EnumValue
Enum(arcTune) String(arc700-xmac) Value(TUNE_ARC700_4_2_XMAC)

EnumValue
Enum(arcTune) String(arc725d) Value(TUNE_ARC700_4_2_XMAC)

EnumValue
Enum(arcTune) String(arc750d) Value(TUNE_ARC700_4_2_XMAC)

mindexed-loads
Target Var(TARGET_INDEXED_LOADS)
Enable the use of indexed loads

mauto-modify-reg
Target Var(TARGET_AUTO_MODIFY_REG)
Enable the use of pre/post modify with register displacement.

mmul32x16
Target Report Mask(MULMAC_32BY16_SET)
Generate 32x16 multiply and mac instructions

mmedium-calls
Target Var(TARGET_MEDIUM_CALLS) Init(TARGET_MMEDIUM_CALLS_DEFAULT)
Don't use less than 25 bit addressing range for calls.

mannotate-align
Target Var(TARGET_ANNOTATE_ALIGN)
Explain what alignment considerations lead to the decision to make an insn short or long.

mRcq
Target
Enable Rcq constraint handling - most short code generation depends on this.

mRcw
Target
Enable Rcw constraint handling - ccfsm condexec mostly depends on this.

mearly-cbranchsi
Target Var(TARGET_EARLY_CBRANCHSI)
Enable pre-reload use of cbranchsi pattern

mbbit-peephole
Target Var(TARGET_BBIT_PEEPHOLE)
Enable bbit peephole2

mcase-vector-pcrel
Target Var(TARGET_CASE_VECTOR_PC_RELATIVE)
Use pc-relative switch case tables - this enables case table shortening.

mcompact-casesi
Target Var(TARGET_COMPACT_CASESI)
Enable compact casesi pattern

mq-class
Target Var(TARGET_Q_CLASS)
Enable 'q' instruction alternatives.

mexpand-adddi
Target Var(TARGET_EXPAND_ADDDI)
Expand adddi3 and subdi3 at rtl generation time into add.f / adc etc.


; Flags used by the assembler, but for which we define preprocessor
; macro symbols as well.
mcrc
Target Report RejectNegative Warn(%qs is deprecated)
Enable variable polynomial CRC extension

mdsp-packa
Target Report RejectNegative Warn(%qs is deprecated)
Enable DSP 3.1 Pack A extensions

mdvbf
Target Report RejectNegative Warn(%qs is deprecated)
Enable dual viterbi butterfly extension

mmac-d16
Target Report RejectNegative Undocumented Warn(%qs is deprecated)

mmac-24
Target Report RejectNegative Undocumented Warn(%qs is deprecated)

mtelephony
Target Report RejectNegative Warn(%qs is deprecated)
Enable Dual and Single Operand Instructions for Telephony

mxy
Target Report RejectNegative Warn(%qs is deprecated)
Enable XY Memory extension (DSP version 3)

; ARC700 4.10 extension instructions
mlock
Target Report RejectNegative Mask(ATOMIC)
Enable Locked Load/Store Conditional extension. Use this option for ARCv1 processors.

mswape
Target Report RejectNegative
Enable swap byte ordering extension instruction

mrtsc
Target Report RejectNegative Warn(%qs is deprecated)
Enable 64-bit Time-Stamp Counter extension instruction

EB
Target
Pass -EB option through to linker.

EL
Target
Pass -EL option through to linker.

marclinux
target
Pass -marclinux option through to linker.

marclinux_prof
target
Pass -marclinux_prof option through to linker.

;; lra is still unproven for ARC, so allow to fall back to reload with -mno-lra.
;Target InverseMask(NO_LRA)
mlra
; lra still won't allow to configure libgcc; see PR rtl-optimization/55464.
; so don't enable by default.
Target Mask(LRA)
Enable lra

mlra-priority-none
Target RejectNegative Var(arc_lra_priority_tag, ARC_LRA_PRIORITY_NONE)
Don't indicate any priority with TARGET_REGISTER_PRIORITY

mlra-priority-compact
Target RejectNegative Var(arc_lra_prioritytag, ARC_LRA_PRIORITY_COMPACT)
Indicate priority for r0..r3 / r12..r15 with TARGET_REGISTER_PRIORITY

mlra-priority-noncompact
Target RejectNegative Var(arc_lra_prioritytag, ARC_LRA_PRIORITY_NONCOMPACT)
Reduce priority for r0..r3 / r12..r15 with TARGET_REGISTER_PRIORITY

mucb-mcount
Target Report Var(TARGET_UCB_MCOUNT)
instrument with mcount calls as in the ucb code

mbypass-cache
Target Report Mask(BYPASS_CACHE)
Controls the .di instruction extension of atomic instructions. When enabled, the atomic operations operates directly on external memory.

mirq-ctrl-saved=
Target RejectNegative Joined Var(arc_deferred_options) Defer
Specifies the registers that the processor saves on an interrupt entry and exit.

mrgf-banked-regs=
Target RejectNegative Joined Var(arc_deferred_options) Defer
Specifies the number of registers replicated in second register bank on entry to fast interrupt.

mabi=
Target RejectNegative Joined Var(arc_abi) Enum(arc_abi_type) Init(ARC_ABI_STD)
Specify the desired ABI used for ARC HS processors. Variants can be std or mwabi.

Enum
Name(arc_abi_type) Type(enum arc_abi_type)

EnumValue
Enum(arc_abi_type) String(std) Value(ARC_ABI_STD)

EnumValue
Enum(arc_abi_type) String(mwabi) Value(ARC_ABI_MWABI)

mtls
Target Report Var(TARGET_TLS)
Enable target-specific TLS support

mtls9
Target Report Var(TARGET_TLS9)
Assume local tls symbols can be addressed with scaled s9 offset

mtp-regno=
Target RejectNegative Joined UInteger Var(arc_tp_regno) Init(25)
Specify thread pointer register number

mtp-regno=none
Target RejectNegative Var(arc_tp_regno,-1)

TargetVariable
unsigned int arc_seen_options = 0
